name: CI/CD Deploy

on:
  push:
    branches:
      - main       # Deploy to production
      - staging    # Deploy to staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment
        id: set-env
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "DEPLOY_PATH=/root/srv876994/production" >> $GITHUB_ENV
            echo "STACK=prod" >> $GITHUB_ENV
          else
            echo "DEPLOY_PATH=/root/srv876994/staging" >> $GITHUB_ENV
            echo "STACK=staging" >> $GITHUB_ENV
          fi

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASS }}
          source: "."
          target: "${{ env.DEPLOY_PATH }}"

      - name: Create environment file
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASS }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            if [[ "${{ env.STACK }}" == "prod" ]]; then
              cp .env.production .env
            else
              cp .env.staging .env
            fi

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASS }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            
            # Use the appropriate compose file based on environment
            COMPOSE_FILE="docker-compose.${{ env.STACK }}.yml"
            
            # Build and start containers
            docker compose -f $COMPOSE_FILE down --remove-orphans
            docker compose -f $COMPOSE_FILE build --no-cache
            docker compose -f $COMPOSE_FILE up -d
            
            # Cleanup
            docker system prune -af --volumes
            
            # Verify deployment
            docker compose -f $COMPOSE_FILE ps
            docker compose -f $COMPOSE_FILE logs --tail=20
